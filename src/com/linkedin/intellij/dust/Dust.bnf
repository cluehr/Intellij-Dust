{
  parserClass="com.linkedin.intellij.dust.parser.DustParser"
  stubParserClass="com.linkedin.intellij.dust.parser.GeneratedParserUtilBase"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Dust"
  psiImplClassSuffix="Impl"
  psiPackage="com.linkedin.intellij.dust.psi"
  psiImplPackage="com.linkedin.intellij.dust.psi.impl"

  elementTypeHolderClass="com.linkedin.intellij.dust.psi.DustTypes"
  elementTypeClass="com.linkedin.intellij.dust.psi.DustElementType"
  tokenTypeClass="com.linkedin.intellij.dust.psi.DustTokenType"
}

dustFile ::= statements

statements ::= (comment|tag_block|tag|json|HTML|CRLF)* { pin=1 }

comment ::= COMMENT_START COMMENT_TODO* COMMENT_CONTENT* COMMENT_END

json ::= LD (json|tag|HTML|CRLF|STRING|IDENTIFIER)* RD

tag_block ::= open_tag statements close_tag { pin=1 }

tag ::= (self_close_tag|else_tag|key_tag)

key_tag ::= LD tag_name context* tag_content RD

open_tag ::= (SECTION|EXISTANCE|NOT_EXISTANCE|HELPER|PARTIAL|INLINE_PARTIAL|BLOCK) tag_name context* tag_content RD

else_tag ::= ELSE tag_name tag_content RD

close_tag ::= CLOSE tag_name tag_content RD

self_close_tag ::= (SECTION|EXISTANCE|NOT_EXISTANCE|HELPER|PARTIAL|INLINE_PARTIAL|BLOCK|CLOSE|ELSE|LD) tag_name context* tag_content SLASH_RD

tag_name ::= (path|STRING|STRING_SINGLE|IDENTIFIER|PERIOD)

context ::= COLON (path|STRING|STRING_SINGLE|IDENTIFIER|PERIOD)

tag_content ::= attribute* filter*

path::= PERIOD? IDENTIFIER (PERIOD IDENTIFIER)*

attribute ::= IDENTIFIER EQUAL (path|attrString|IDENTIFIER)

attrString ::= (STRING_START ((tag_block|tag|i18nFormat) | STRING+)+ STRING_END) | (STRING_START STRING_END)

i18nFormat ::= LD (tag|IDENTIFIER|HTML|PIPE)* RD

filter ::= PIPE IDENTIFIER